'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var declFilter = /^composes$/;
var matchImports = /^(.+?\s+from\s+)(?:'([^']+)'|"([^"]+)"|(global))$/;

function processOptions(options) {
  var paths = options.paths;
  return paths;
}

function replacePaths(searchPath, searchPaths) {
  if (searchPath.indexOf('.') == 0 || searchPath.indexOf('/') == 0) {
    return searchPath;
  }

  for (var i = 0; i < searchPaths.length; i++) {
    var test = searchPaths[i];
    var fullPath = _path2['default'].join(test, searchPath);

    if (_fs2['default'].existsSync(fullPath)) {
      return fullPath;
    }
  }

  return searchPath;
}

function processDecl(decl, searchPaths) {
  var matches = decl.value.match(matchImports);

  if (matches) {
    var _matches = _slicedToArray(matches, 4);

    var /*match*/beforePath = _matches[1];
    var singleQuotePath = _matches[2];
    var doubleQuotePath = _matches[3];

    var pathQuote = doubleQuotePath ? '"' : '\'';
    var searchPath = singleQuotePath || doubleQuotePath;
    var newPath = replacePaths(searchPath, searchPaths);

    decl.value = '' + beforePath + pathQuote + newPath + pathQuote;
  }
}

exports['default'] = _postcss2['default'].plugin('modules-extract-imports', function () {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var searchPaths = processOptions(options);

  return function (css) {
    // find any declaration that looks like a 'composes'
    css.walkDecls(declFilter, function (decl) {
      return processDecl(decl, searchPaths);
    });
  };
});
module.exports = exports['default'];