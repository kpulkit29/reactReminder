'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _balancedMatch = require('balanced-match');

var _balancedMatch2 = _interopRequireDefault(_balancedMatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RE_PROP_SET = /^(--)([\w-]+)(\s*)([:]?)$/;

var Visitor = function Visitor() {
  var _this = this;

  _classCallCheck(this, Visitor);

  this.cache = {};
  this.result = {};

  this.collect = function (rule) {
    var matches = RE_PROP_SET.exec(rule.selector);

    if (!matches) {
      return;
    }

    var setName = matches[2];
    var parent = rule.parent;

    if (parent.selector !== ':root') {
      rule.warn(_this.result, 'Custom property set ignored: not scoped to top-level `:root` ' + ('(--' + setName) + ((parent.type === 'rule' ? ' declared in ' + parent.selector : '') + ')'));

      return;
    }

    // Custom property sets override each other wholly,
    // rather than cascading together like colliding style rules do.
    // @see: https://tabatkins.github.io/specs/css-apply-rule/#defining
    _this.cache[setName] = rule;

    rule.remove();

    if (!parent.nodes.length) {
      parent.remove();
    }
  };

  this.resolveNested = function () {
    Object.keys(_this.cache).forEach(function (rule) {
      return _this.cache[rule].walkAtRules('apply', _this.resolve);
    });
  };

  this.resolve = function (atRule) {
    var param = getParamValue(atRule.params);
    var matches = RE_PROP_SET.exec(param);

    if (!matches) {
      return;
    }

    var setName = matches[2];

    if (setName in _this.cache) {
      atRule.replaceWith(_this.cache[setName].nodes);
    } else {
      atRule.warn(_this.result, 'No custom property set declared for `' + setName + '`.');
    }
  };
}

/**
 * Collect all `:root` declared property sets and save same them.
 * @param {Node} rule
 */


/**
 * Replace nested `@apply` at-rules declarations.
 */


/**
 * Replace `@apply` at-rules declarations with provided custom property set.
 * @param {Node} atRule
 */
;

/**
 * Helper: allow parens usage in `@apply` rule declaration.
 * This is for Polymer integration.
 * @param {String} param
 * @return {String}
 */


exports.default = Visitor;
function getParamValue(param) {
  return (/^\(/.test(param) ? (0, _balancedMatch2.default)('(', ')', param).body : param
  );
}